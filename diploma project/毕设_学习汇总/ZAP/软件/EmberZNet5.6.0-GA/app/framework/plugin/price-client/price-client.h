// *******************************************************************
// * price-client.h
// *
// *
// * Copyright 2010 by Ember Corporation. All rights reserved.              *80*
// *******************************************************************

#ifndef _PRICE_CLIENT_H_
#define _PRICE_CLIENT_H_

#ifndef EMBER_AF_PLUGIN_PRICE_CLIENT_TABLE_SIZE
#define EMBER_AF_PLUGIN_PRICE_CLIENT_TABLE_SIZE 2
#endif //EMBER_AF_PLUGIN_PRICE_CLIENT_TABLE_SIZE

#define ZCL_PRICE_CLUSTER_PRICE_ACKNOWLEDGEMENT_MASK 0x01
#define ZCL_PRICE_CLUSTER_RESERVED_MASK              0xFE

#define ZCL_PRICE_CLUSTER_START_TIME_NOW                         0x00000000UL
#define ZCL_PRICE_CLUSTER_END_TIME_NEVER                         0xFFFFFFFFUL
#define ZCL_PRICE_CLUSTER_DURATION_UNTIL_CHANGED                 0xFFFF
#define ZCL_PRICE_CLUSTER_PRICE_RATIO_NOT_USED                   0xFF
#define ZCL_PRICE_CLUSTER_GENERATION_PRICE_NOT_USED              0xFFFFFFFFUL
#define ZCL_PRICE_CLUSTER_GENERATION_PRICE_RATIO_NOT_USED        0xFF
#define ZCL_PRICE_CLUSTER_ALTERNATE_COST_DELIVERED_NOT_USED      0xFFFFFFFFUL
#define ZCL_PRICE_CLUSTER_ALTERNATE_COST_UNIT_NOT_USED           0xFF
#define ZCL_PRICE_CLUSTER_ALTERNATE_COST_TRAILING_DIGIT_NOT_USED 0xFF
#define ZCL_PRICE_CLUSTER_NUMBER_OF_BLOCK_THRESHOLDS_NOT_USED    0xFF
#define ZCL_PRICE_CLUSTER_PRICE_CONTROL_NOT_USED                 0x00

// Price Client Command Common Structure - common elements used in most price commands
// ==========================================================
#define UNSPECIFIED_PROVIDER_ID  0xFFFFFFFF   // Used to initialize provider ID for commands that don't support it.
#define UNSPECIFIED_DURATION  0xFFFFFFFF

typedef struct{
  int32u providerId;      // Unique identifier for the commodity provider.
  int32u issuerEventId;   // Unique identifier for the transaction, generated by the commodity provider.
  int32u startTime;       // The UTC time when the event should take effect.
  int32u durationSec;     // Duration of the event, in seconds.
  boolean valid;          // Specifies whether the data at this index is valid or not.
} EmberAfPriceClientCommonInfo;

/*   FOR PASTING INTO NEW CODE:
info.___.commonInfos[].providerId = UNSPECIFIED_PROVIDER_ID;
info.___.commonInfos[].issuerEventId =
info.___.commonInfos[].startTime =
info.___.commonInfos[].durationSec = UNSPECIFIED_DURATION;
info.___.commonInfos[].valid = TRUE;

*/


// Price Client Command Specific Structures
// ==========================================================

typedef struct{
  int32u billingPeriodStartTime;
  int32u billingPeriodDuration;
  int8u  billingPeriodDurationType;
  int8u  tariffType;
} EmberAfPriceClientBillingPeriod;

typedef struct{
  int32u blockPeriodStartTime;  // Raw start time, before adjustments made by blockPeriodDurationType.
  int32u blockPeriodDuration;   // Raw duration, units specified by blockPeriodDurationType.
  int8u blockPeriodControl;
  int8u blockPeriodDurationType;
  int8u tariffType;
  int8u tariffResolutionPeriod;
} EmberAfPriceClientBlockPeriod;


typedef struct{
  int32u issuerTariffId;
  int8u  subPayloadControl;
  int8u  tierNumberOfBlockThresholds[EMBER_AF_PLUGIN_PRICE_CLIENT_MAX_NUMBER_BLOCK_THRESHOLDS];
  int8u  blockThreshold[ EMBER_AF_PLUGIN_PRICE_CLIENT_MAX_NUMBER_TIERS + 1 ][ 6 * (EMBER_AF_PLUGIN_PRICE_CLIENT_MAX_NUMBER_BLOCK_THRESHOLDS+1) ];
} EmberAfPriceClientBlockThreshold;

typedef struct{
  int32u calorificValue;
  int8u  calorificValueUnit;
  int8u  calorificValueTrailingDigit;
} EmberAfPriceClientCalorificValue;

typedef struct{
  int8u tariffType;
  int32u cO2Value;
  int8u  cO2ValueUnit;
  int8u  cO2ValueTrailingDigit;
} EmberAfPriceClientCo2Value;

typedef struct{
  int32u conversionFactor;
  int8u  conversionFactorTrailingDigit;
} EmberAfPriceClientConversionFactor;

typedef struct{
  int16u durationInMinutes;
  int8u  tariffType;
  int8u  cppPriceTier;
  int8u  cppAuth;
} EmberAfPriceClientCppEvent;

#define EMBER_AF_PLUGIN_PRICE_CLUSTER_MAX_CREDIT_PAYMENT_REF_LENGTH 20
typedef struct{
  int32u creditPaymentDueDate;
  int32u creditPaymentOverDueAmount;
  int8u  creditPaymentStatus;
  int32u creditPayment;
  int32u creditPaymentDate;
  int8u  creditPaymentRef[ EMBER_AF_PLUGIN_PRICE_CLUSTER_MAX_CREDIT_PAYMENT_REF_LENGTH + 1 ];
} EmberAfPriceClientCreditPayment;

typedef struct{
  int32u conversionFactor;
  int32u currencyChangeControlFlags;
  int16u newCurrency;
  int8u  conversionFactorTrailingDigit;
} EmberAfPriceClientCurrencyConversion;

typedef struct{
  int32u issuerTariffId;
  int8u  numberOfLabels;
  int8u  tierIds[EMBER_AF_PLUGIN_PRICE_CLIENT_MAX_TIERS_PER_TARIFF];
  int8u  tierLabels[EMBER_AF_PLUGIN_PRICE_CLIENT_MAX_TIERS_PER_TARIFF][13];
} EmberAfPriceClientTierLabels;


// Price Client Command Tables
// ==========================================================

typedef struct{
  EmberAfPriceClientCommonInfo    commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_BILLING_PERIOD_TABLE_SIZE];
  EmberAfPriceClientBillingPeriod billingPeriod[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_BILLING_PERIOD_TABLE_SIZE];
} EmberAfPriceClientBillingPeriodTable;

typedef struct{
  EmberAfPriceClientCommonInfo commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_BLOCK_PERIOD_TABLE_SIZE];
  EmberAfPriceClientBlockPeriod blockPeriod[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_BLOCK_PERIOD_TABLE_SIZE];
} EmberAfPriceClientBlockPeriodTable;

typedef struct{
  EmberAfPriceClientCommonInfo commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_BLOCK_THRESHOLD_TABLE_SIZE];
  EmberAfPriceClientBlockThreshold blockThreshold[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_BLOCK_THRESHOLD_TABLE_SIZE];
} EmberAfPriceClientBlockThresholdTable;

typedef struct{
  EmberAfPriceClientCommonInfo commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CALORIFIC_VALUE_TABLE_SIZE];
  EmberAfPriceClientCalorificValue calorificValue[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CALORIFIC_VALUE_TABLE_SIZE];
} EmberAfPriceClientCalorificValueTable;

typedef struct{
  EmberAfPriceClientCommonInfo commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CO2_TABLE_SIZE];
  EmberAfPriceClientCo2Value   co2Value[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CO2_TABLE_SIZE];
} EmberAfPriceClientCo2ValueTable;

typedef struct{
  EmberAfPriceClientCommonInfo commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CONVERSION_FACTOR_TABLE_SIZE];
  EmberAfPriceClientConversionFactor conversionFactor[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CONVERSION_FACTOR_TABLE_SIZE];
} EmberAfPriceClientConversionFactorTable;

typedef struct{
  EmberAfPriceClientCommonInfo commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT];
  EmberAfPriceClientCppEvent   cppEvent[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT];
} EmberAfPriceClientCppEventTable;

typedef struct{
  EmberAfPriceClientCommonInfo commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CREDIT_PAYMENT_TABLE_SIZE];
  EmberAfPriceClientCreditPayment creditPayment[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CREDIT_PAYMENT_TABLE_SIZE];
} EmberAfPriceClientCreditPaymentTable;

typedef struct{
  EmberAfPriceClientCommonInfo commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CURRENCY_CONVERSION_TABLE_SIZE];
  EmberAfPriceClientCurrencyConversion currencyConversion[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_CURRENCY_CONVERSION_TABLE_SIZE];
} EmberAfPriceClientCurrencyConversionTable;

typedef struct{
  EmberAfPriceClientCommonInfo commonInfos[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_TIER_LABELS_TABLE_SIZE];
  EmberAfPriceClientTierLabels tierLabels[EMBER_AF_PRICE_CLUSTER_CLIENT_ENDPOINT_COUNT][EMBER_AF_PLUGIN_PRICE_CLIENT_TIER_LABELS_TABLE_SIZE];
} EmberAfPriceClientTierLabelsTable;

// Singular Price Client Structure for storing pricing information
// ==========================================================
typedef struct{
  EmberAfPriceClientBillingPeriodTable      billingPeriodTable;
  EmberAfPriceClientBlockPeriodTable        blockPeriodTable;
  EmberAfPriceClientBlockThresholdTable     blockThresholdTable;
  EmberAfPriceClientCalorificValueTable     calorificValueTable;
  EmberAfPriceClientCo2ValueTable           co2ValueTable;
  EmberAfPriceClientConversionFactorTable   conversionFactorTable;
  EmberAfPriceClientCppEventTable           cppEventTable;
  EmberAfPriceClientCreditPaymentTable      creditPaymentTable;
  EmberAfPriceClientCurrencyConversionTable currencyConversionTable;
  EmberAfPriceClientTierLabelsTable         tierLabelsTable;
} EmberAfPriceClientInfo;


//void emberAfPriceClusterClientInitCallback(int8u endpoint);

void emAfPluginPriceClientPrintInfo(int8u endpoint);
void emAfPluginPriceClientPrintByEventId( int8u endpoint, int32u issuerEventId );
void emAfPriceClearPriceTable(int8u endpoint);



/**
 * @brief Returns the block period table index with a matching eventId.
 *
 * @param endpoint The relevant endpoint
 * @param issuerEventId The eventId that should be searched for in the block period table.
 * @return The index with a valid matching event ID.
 *
 **/
int8u emAfPriceGetBlockPeriodTableIndexByEventId( int8u endpoint, int32u issuerEventId );



/**
 * @brief Prints the information at the specified index of the block period table.
 *
 *
 * @param endpoint The relevant endpoint
 * @param index The index whose data should be printed.
 *
 **/
void emAfPricePrintBlockPeriodTableIndex( int8u endpoint, int8u index );


/**
 * @brief Returns the conversion factor table index with a matching eventId.
 *
 * @param endpoint The relevant endpoint.
 * @param issuerEventId The eventId that should be searched for in the conversion factor table.
 * @return The index with a valid matching event ID.
 *
 **/
int8u emAfPriceGetConversionFactorIndexByEventId( int8u endpoint, int32u issuerEventId );

/**
 * @brief Prints the information at the specified index of the conversion factor table.
 *
 * @param endpoint The relevant endpoint.
 * @param index The index whose data should be printed.
 *
 **/
void emAfPricePrintConversionFactorEntryIndex( int8u endpoint, int8u index );

/**
 * @brief Returns the calorific value table index with a matching eventId.
 *
 * @param endpoint The relevant endpoint.
 * @param issuerEventId The eventId that should be searched for in the calorific value table.
 * @return The index with a valid matching event ID.
 *
 **/
int8u emAfPriceGetCalorificValueIndexByEventId( int8u endpoint, int32u issuerEventId );


/**
 * @brief Prints the information at the specified index of the calorific value table.
 *
 * @param endpoint The relevant endpoint.
 * @param index The index whose data should be printed.
 *
 **/
void emAfPricePrintCalorificValueEntryIndex( int8u endpoint, int8u index );

/**
 * @brief Initializes the consolidated bills table.
 *
 * @param endpoint The relevant endpoint.
 *
 **/
void emberAfPriceInitConsolidatedBillsTable( int8u endpoint );

/**
 * @brief Returns the index of the currently active CO2 entry, or 0xFF if no active entry can be found.
 *
 * @param endpoint The relevant endpoint.
 * @return The index of the active CO2 entry.
 *
 **/
int8u emberAfPriceClusterGetActiveCo2ValueIndex( int8u endpoint );

/**
 * @brief Returns the index of the currently active tier label table entry, or 0xFF if no active entry can be found.
 *
 * @param endpoint The relevant endpoint.
 * @return The index of the active tier label table entry.
 *
 **/
int8u emAfPriceGetActiveTierLabelTableIndexByTariffId( int8u endpoint, int32u tariffId );

/**
 * @brief Prints the information at the specified index of the tier label table.
 *
 * @param endpoint The relevant endpoint.
 * @param index The index whose data should be printed.
 *
 **/
void emAfPricePrintTierLabelTableEntryIndex( int8u endpoint, int8u index );

/**
 * @brief Prints the information at the specified index of the CO2 value table.
 *
 * @param endpoint The relevant endpoint.
 * @param index The index whose data should be printed.
 *
 **/
void emAfPricePrintCo2ValueTablePrintIndex( int8u endpoint, int8u index );

/**
 * @brief Prints the tier label table.
 *
 **/
//void emAfPriceClientPrintTierLabelTable( void );

/**
 * @brief Returns the consolidated bill table index with a matching eventId.
 *
 * @param endpoint The relevant endpoint.
 * @param issuerEventId The eventId that should be searched for in the consolidated bill table.
 * @return The index with a valid matching event ID.
 *
 **/
int8u emAfPriceConsolidatedBillTableGetIndexWithEventId( int8u endpoint, int32u issuerEventId );

/**
 * @brief Returns the index of the active consolidated bill table.
 *
 * @param endpoint The relevant endpoint.
 * @return The index of the consolidated bills table with a valid matching event ID, or 0xFF if no valid match is found.
 *
 **/
int8u emAfPriceConsolidatedBillTableGetCurrentIndex( int8u endpoint );

/**
 * @brief Prints the information at the specified index of the consolidated bill table.
 *
 * @param endpoint The relevant endpoint.
 * @param index The index whose data should be printed.
 *
 **/
void emAfPricePrintConsolidatedBillTableIndex( int8u endpoint, int8u index );

/**
 * @brief Prints information about the CPP event.
 *
 * @param endpoint THe relevant endpoint.
 *
 **/
void emberAfPricePrintCppEvent( int8u endpoint );

/**
 * @brief Returns the credit payment table index with a matching eventId.
 *
 * @param issuerEventId The eventId that should be searched for in the credit payment table.
 * @return The index with a valid matching event ID.
 *
 **/
int8u emAfPriceCreditPaymentTableGetIndexWithEventId( int8u endpoint, int32u issuerEventId );

/**
 * @brief Prints the credit payment table entry data of the index with a valid matching eventId.
 *
 * @param endpoint The relevant endpoint.
 * @param issuerEventId The eventId that should be found in the credit payment table.
 *
 **/
void emAfPricePrintCreditPaymentTableEventId( int32u issuerEventId );

/**
 * @brief Prints the information at the specified index of the credit payment table.
 *
 * @param endpoint The relevant endpoint.
 * @param index The index whose data should be printed.
 *
 **/
void emAfPricePrintCreditPaymentTableIndex( int8u endpoint, int8u index );

/**
 * @brief Returns the currency conversion table index with a matching eventId.
 *
 * @param endpoint The relevant endpoint.
 * @param issuerEventId The eventId that should be searched for in the currency conversion table.
 * @return The index with a valid matching event ID.
 *
 **/
int8u emberAfPriceClusterCurrencyConversionTableGetIndexByEventId( int8u endpoint, int32u issuerEventId );

/**
 * @brief Prints the information at the specified index of the currency conversion table.
 *
 * @param endpoint The relevant endpoint.
 * @param index The index whose data should be printed.
 *
 **/
void emAfPricePrintCurrencyConversionTableIndex( int8u endpoint, int8u index );

/**
 * @brief Returns the index of the currently active currency conversion entry, or 0xFF if no active entry can be found.
 *
 * @param endpoint The relevant endpoint.
 * @return The index of the active currency conversion entry.
 *
 **/
int8u emberAfPriceClusterGetActiveCurrencyIndex( int8u endpoint );

/**
 * @brief Returns the index of the currently active billing period entry, or 0xFF if no active entry can be found.
 *
 * @param endpoint The relevant endpoint.
 * @return The index of the active billing period entry.
 *
 **/
int8u emAfPriceGetActiveBillingPeriodIndex( int8u endpoint );

/**
 * @brief Prints the information at the specified index of the billing period table.
 *
 * @param endpoint The relevant endpoint.
 * @param index The index whose data should be printed.
 *
 **/
void emAfPricePrintBillingPeriodTableEntryIndex( int8u endpoint, int8u index );


#endif  // #ifndef _PRICE_CLIENT_H_ 

