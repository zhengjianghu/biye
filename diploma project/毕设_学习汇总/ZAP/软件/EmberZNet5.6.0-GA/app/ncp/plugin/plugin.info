pluginDirectory=.

# Command Handlers

plugin(ezsp-binding) {
  name=Binding Library EZSP Command Handlers
  description=This plugin provides functionality to manage the binding table on the NCP.
  category=Command Handler
  quality=production
  root=$STACK/app/em260/
  
  requiredApis=ezsp,binding
  
  providedApis=ezsp-binding
  
  # APP:NCP_BINDING
  command-handlers-binding.c
  
  setup(ezsp) {
    sections = Binding Frames
    
    clearBindingTable      = emberClearBindingTable
    setBindingRemoteNodeId = emberSetBindingRemoteNodeId
    bindingIsActive        = emberBindingIsActive
    getBinding             = emberGetBinding
    getBindingRemoteNodeId = emberGetBindingRemoteNodeId
  }

  setup(bookkeeping) {
    getPolicy             = emberAfPluginEzspBindingPolicyCommandCallback
    setPolicy             = emberAfPluginEzspBindingPolicyCommandCallback
    getConfigurationValue = emberAfPluginEzspBindingConfigurationValueCommandCallback
    setConfigurationValue = emberAfPluginEzspBindingConfigurationValueCommandCallback

    modifyMemoryAllocation = emInitializeBindingTable

    permitHostToNcpFrame = emberAfPluginEzspBindingPermitHostToNcpFrameCallback
  }

  precompiled(em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-binding-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-binding-library.a
    command-handlers-binding.c
  }

  precompiled(simulation) {
    file=$STACK/build/ncp-binding-library-unix-gcc-simulation-simulation/ncp-binding-library.a
    command-handlers-binding.c
  }
}

plugin(ezsp-cbke) {
  name=CBKE Library EZSP Command Handlers
  description=This plugin provides functionality to manage CBKE activity on the NCP.
  category=Command Handler
  quality=production
  root=$STACK/app/em260
  
  requiredApis=ezsp,cbke
  
  providedApis=ezsp-cbke
  
  command-handlers-cbke.c
  
  setup(ezsp) {
    sections = Certificate Based Key Exchange (CBKE)
    include = EMBER_AF_API_CBKE
    
    calculateSmacs          = emberCalculateSmacs
    calculateSmacs283k1     = emberCalculateSmacs283k1
    clearTemporaryDataMaybeStoreLinkKey = emberClearTemporaryDataMaybeStoreLinkKey283k1
    clearTemporaryDataMaybeStoreLinkKey283k1 = emberClearTemporaryDataMaybeStoreLinkKey283k1
    dsaVerify               = emberDsaVerify
    getCertificate          = emberGetCertificate
    getCertificate283k1     = emberGetCertificate283k1
    generateCbkeKeys        = emberGenerateCbkeKeys
    generateCbkeKeys283k1   = emberGenerateCbkeKeys283k1
    setPreinstalledCbkeData = emberSetPreinstalledCbkeData
  }

  setup(bookkeeping) {
    setValue              = emberAfPluginEzspCbkeSetValueCommandCallback
    getConfigurationValue = emberAfPluginEzspCbkeConfigurationValueCommandCallback
    setConfigurationValue = emberAfPluginEzspCbkeConfigurationValueCommandCallback

    permitHostToNcpFrame = emberAfPluginEzspCbkePermitHostToNcpFrameCallback
  }

  precompiled(em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-cbke-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-cbke-library.a
    command-handlers-cbke.c
  }

  precompiled(simulation) {
    file=$STACK/build/ncp-cbke-library-unix-gcc-simulation-simulation/ncp-cbke-library.a
    command-handlers-cbke.c
  }
}

plugin(ezsp-mfglib) {
  name=Manufacturing Library EZSP Command Handlers
  description=This library provides functionality to support handling manufacturing library EZSP frames on the NCP.
  category=Command Handler
  quality=production
  root=$STACK/app/em260

  requiredApis=ezsp,ember-types,mfglib

  providedApis=ezsp-mfglib

  # APP:NCP_MFGLIB
  command-handlers-mfglib.c

  setup(ezsp) {
    sections = Mfglib
    include = EMBER_AF_API_MFGLIB

    mfglibSetPower    = mfglibSetPower
    mfglibEnd         = mfglibEnd
    mfglibStartTone   = mfglibStartTone
    mfglibStopTone    = mfglibStopTone
    mfglibStartStream = mfglibStartStream
    mfglibStopStream  = mfglibStopStream
    mfglibGetChannel  = mfglibGetChannel
    mfglibSetChannel  = mfglibSetChannel
    mfglibGetPower    = mfglibGetPower
  }

  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-mfglib-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-mfglib-library.a
    command-handlers-mfglib.c
  }

  precompiled(simulation) {
    file=$STACK/build/ncp-mfglib-library-unix-gcc-simulation-simulation/ncp-mfglib-library.a
    command-handlers-mfglib.c
  }
}

plugin(ezsp-rf4ce) {
  name=RF4CE Library EZSP Command Handlers
  description=This plugin provides functionality to manage RF4CE activity on the NCP.
  category=Command Handler
  quality=production
  root=$STACK/app/em260/
  
  requiredApis=ezsp,rf4ce
  
  providedApis=ezsp-rf4ce
  api.ezsp-rf4ce.header=command-handlers-rf4ce.h
  
  # APP:NCP_RF4CE
  command-handlers-rf4ce.c
  
  setup(ezsp) {
    sections = RF4CE
    
    rf4ceSetPairingTableEntry          = emberRf4ceSetPairingTableEntry
    rf4ceGetPairingTableEntry          = emberRf4ceGetPairingTableEntry
    rf4ceKeyUpdate                     = emberRf4ceKeyUpdate
    rf4ceSend                          = emberRf4ceSend
    rf4ceStart                         = emberRf4ceStart
    rf4ceStop                          = emberRf4ceStop
    rf4ceUnpair                        = emberRf4ceUnpair
    rf4ceSetPowerSavingParameters      = emberRf4ceSetPowerSavingParameters
    rf4ceSetFrequencyAgilityParameters = emberRf4ceSetFrequencyAgilityParameters
    rf4ceGetApplicationInfo            = emberRf4ceGetApplicationInfo
    rf4ceSetApplicationInfo            = emberRf4ceSetApplicationInfo
    rf4ceGetMaxPayload                 = emberRf4ceGetMaxPayload
    rf4cePair                          = emberRf4cePair
  }
  
  setup(bookkeeping) {
    getValue               = emberAfPluginEzspRf4ceGetValueCommandCallback
    setValue               = emberAfPluginEzspRf4ceSetValueCommandCallback
    getPolicy              = emberAfPluginEzspRf4cePolicyCommandCallback
    setPolicy              = emberAfPluginEzspRf4cePolicyCommandCallback
    getConfigurationValue  = emberAfPluginEzspRf4ceConfigurationValueCommandCallback
    setConfigurationValue  = emberAfPluginEzspRf4ceConfigurationValueCommandCallback
    modifyMemoryAllocation = emberAfPluginEzspRf4ceModifyMemoryAllocationCallback
  }

  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-rf4ce-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-rf4ce-library.a
    command-handlers-rf4ce.c
  }

  precompiled(simulation) {
    file=$STACK/build/ncp-rf4ce-library-unix-gcc-simulation-simulation/ncp-rf4ce-library.a
    command-handlers-rf4ce.c
  }
}

plugin(ezsp-security) {
  name=ZigBee PRO Core Security Library EZSP Command Handlers
  description=This plugin provides functionality to manage ZigBee PRO security on an NCP.
  category=Command Handler
  quality=production
  root=$STACK/app/em260/
  
  requiredApis=ezsp,security
  
  providedApis=ezsp-security
  api.ezsp-security.header=command-handlers-security.h
  
  # APP:NCP_SECURITY
  command-handlers-security.c

  implementedCallbacks=emberZigbeeKeyEstablishmentHandler
  
  setup(ezsp) {
    sections = Security Frames, Trust Center Frames
    
    # Security Frames
    setInitialSecurityState  = emberSetInitialSecurityState
    getCurrentSecurityState  = emberGetCurrentSecurityState
    setKeyTableEntry         = emberSetKeyTableEntry
    findKeyTableEntry        = emberFindKeyTableEntry
    addOrUpdateKeyTableEntry = emberAddOrUpdateKeyTableEntry
    eraseKeyTableEntry       = emberEraseKeyTableEntry
    requestLinkKey           = emberRequestLinkKey
    clearKeyTable            = emberClearKeyTable
    getKey                   = emberGetKey
    getKeyTableEntry         = emberGetKeyTableEntry
    
    # Trust Center Frames
    broadcastNetworkKeySwitch = emberBroadcastNetworkKeySwitch
    becomeTrustCenter         = emberBecomeTrustCenter
    broadcastNextNetworkKey   = emberBroadcastNextNetworkKey
    removeDevice              = emberSendRemoveDevice
    unicastNwkKeyUpdate       = emberSendUnicastNetworkKeyUpdate
  }

  setup(bookkeeping) {
    getValue              = emberAfPluginEzspSecurityGetValueCommandCallback
    setValue              = emberAfPluginEzspSecuritySetValueCommandCallback
    getPolicy             = emberAfPluginEzspSecurityPolicyCommandCallback
    setPolicy             = emberAfPluginEzspSecurityPolicyCommandCallback
    getConfigurationValue = emberAfPluginEzspSecurityGetConfigurationValueCommandCallback
    setConfigurationValue = emberAfPluginEzspSecuritySetConfigurationValueCommandCallback
  }

  precompiled(em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-security-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-security-library.a
    command-handlers-security.c
  }

  precompiled(simulation) {
    file=$STACK/build/ncp-security-library-unix-gcc-simulation-simulation/ncp-security-library.a
    command-handlers-security.c
  }
}

plugin(ezsp-zigbee-pro) {
  name=ZigBee PRO Library EZSP Command Handlers
  description=This plugin provides functionality to manage a ZigBee PRO network on an NCP.
  category=Command Handler
  quality=production
  root=$STACK/app/em260/
  
  requiredApis=ezsp,zigbee-pro,concentrator-support
  
  providedApis=ezsp-zigbee-pro
  
  callbacks=../ncp/meta-inf/ezsp-zigbee-pro-callback.info

  implementedCallbacks=emberAfPluginEzspAddEndpointCommandCallback
  
  # APP:NCP_PRO
  polling.c
  endpoint-data.c
  source-route.c
  source-route-util-include.c
    # APP_UTIL:SOURCE_ROUTE_COMMON
    ../util/source-route-common.c
  command-handlers-zigbee-pro.c
    # APP_UTIL:SECURITY_ADDRESS_CACHE
    ../util/security/security-address-cache.c

  setup(ezsp) {
    sections = Networking Frames, Messaging Frames
    
    # Networking Frames
    setManufacturerCode = emberSetManufacturerCode
    setPowerDescriptor  = emberSetPowerDescriptor
    networkInitExtended = emberNetworkInitExtended
    startScan           = emberStartScan
    formNetwork         = emberFormNetwork
    joinNetwork         = emberJoinNetwork
    energyScanRequest   = emberEnergyScanRequest
    getNeighbor         = emberGetNeighbor
    getRouteTableEntry  = emberGetRouteTableEntry
    setRadioPower       = emberSetRadioPower
    
    networkState         = emberNetworkState
    stopScan             = emberStopScan
    leaveNetwork         = emberLeaveNetwork
    neighborCount        = emberNeighborCount
    setRadioChannel      = emberSetRadioChannel
    addressTableIsActive = emberAddressTableIsActive
    getLibraryStatus     = emberGetLibraryStatus
    permitJoining        = emberPermitJoining
    
    setConcentrator = emberAfPluginEzspZigbeeProSetConcentratorCommandCallback
    
    # Messaging Frames
    sendManyToOneRouteRequest   = emberSendManyToOneRouteRequest
    setAddressTableRemoteEui64  = emberSetAddressTableRemoteEui64
    getAddressTableRemoteEui64  = emberGetAddressTableRemoteEui64
    setAddressTableRemoteNodeId = emberSetAddressTableRemoteNodeId
    getAddressTableRemoteNodeId = emberGetAddressTableRemoteNodeId
    setExtendedTimeout          = emberSetExtendedTimeout
    getExtendedTimeout          = emberGetExtendedTimeout
    lookupNodeIdByEui64         = emberLookupNodeIdByEui64
    lookupEui64ByNodeId         = emberLookupEui64ByNodeId
    maximumPayloadLength        = emberMaximumApsPayloadLength
    addressTableEntryIsActive   = emberAddressTableEntryIsActive
  }
  
  setup(eventConfiguration) {
    emberAfPluginEzspZigbeeProPollTimer0EventControl, emberAfPluginEzspZigbeeProPollTimer0EventHandler 
    emberAfPluginEzspZigbeeProPollTimer1EventControl, emberAfPluginEzspZigbeeProPollTimer1EventHandler
    emberAfPluginEzspZigbeeProPollTimer2EventControl, emberAfPluginEzspZigbeeProPollTimer2EventHandler
    emberAfPluginEzspZigbeeProPollTimer3EventControl, emberAfPluginEzspZigbeeProPollTimer3EventHandler
  }
  
  setup(bookkeeping) {
    getValue              = emberAfPluginEzspZigbeeProGetValueCommandCallback
    getExtendedValue      = emberAfPluginEzspZigbeeProGetExtendedValueCommandCallback
    setValue              = emberAfPluginEzspZigbeeProSetValueCommandCallback
    getPolicy             = emberAfPluginEzspZigbeeProPolicyCommandCallback
    setPolicy             = emberAfPluginEzspZigbeeProPolicyCommandCallback
    getConfigurationValue = emberAfPluginEzspZigbeeProGetConfigurationValueCommandCallback
    setConfigurationValue = emberAfPluginEzspZigbeeProSetConfigurationValueCommandCallback

    modifyMemoryAllocation = emberAfPluginEzspZigbeeProModifyMemoryAllocationCallback
    
    init = emberAfPluginEzspZigbeeProInitCallback
  }

  precompiled(em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-pro-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-pro-library.a
    polling.c
    endpoint-data.c
    source-route.c
    source-route-util-include.c
    ../util/source-route-common.c
    command-handlers-zigbee-pro.c
    ../util/security/security-address-cache.c
  }

  precompiled(simulation) {
    file=$STACK/build/ncp-pro-library-unix-gcc-simulation-simulation/ncp-pro-library.a
    polling.c
    endpoint-data.c
    source-route.c
    source-route-util-include.c
    ../util/source-route-common.c
    command-handlers-zigbee-pro.c
    ../util/security/security-address-cache.c
  }
}

plugin(ezsp-zll) {
  name=ZigBee Light Link EZSP Command Handlers
  description=This plugin provides functionality to manage a ZLL network on an NCP.
  category=Command Handler
  quality=production
  root=$STACK/app/em260/
  
  requiredApis=ezsp,zll
  
  providedApis=ezsp-zll
  
  # APP:NCP_ZLL
  command-handlers-zll.c
  
  setup(ezsp) {
    sections = ZLL
    
    zllSetInitialSecurityState = emberZllSetInitialSecurityState
    zllStartScan               = emberZllStartScan
    zllSetRxOnWhenIdle         = emberZllSetRxOnWhenIdle
    zllGetTokens               = emberZllGetTokensStackZll
    zllSetDataToken            = emberZllSetTokenStackZllData
    zllSetNonZllNetwork        = emberZllSetNonZllNetwork
    isZllNetwork               = emberIsZllNetwork
  }

  setup(bookkeeping) {
    getPolicy             = emberAfPluginEzspZllPolicyCommandCallback
    setPolicy             = emberAfPluginEzspZllPolicyCommandCallback
    getConfigurationValue = emberAfPluginEzspZllConfigurationValueCommandCallback
    setConfigurationValue = emberAfPluginEzspZllConfigurationValueCommandCallback
  }

  precompiled(em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-zll-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-zll-library.a
    command-handlers-zll.c
  }

  precompiled(simulation) {
    file=$STACK/build/ncp-zll-library-unix-gcc-simulation-simulation/ncp-zll-library.a
    command-handlers-zll.c
  }
}

# Core

plugin(concentrator-support-library) {
  name=Concentrator Support Library
  description=This plugin provides support for an NCP acting as a concentrator in a ZigBee PRO network.
  category=Utility
  quality=production
  root=$STACK/app/em260/

  requiredAps=zigbee-pro

  providedApis=concentrator-support
  api.concentrator-support.header=concentrator.h
  
  implementedCallbacks=emberAfPluginEzspZigbeeProSetConcentratorCommandCallback
  
  # APP:EM260_CONCENTRATOR
  concentrator.c

  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/em260-concentrator-library-cortexm3-iar-$--architectureId;L--$-em3xx/em260-concentrator-library.a
    concentrator.c
  }
  
  setup(eventConfiguration) {
    emberAfPluginConcentratorSupportLibraryEventControl, emberAfPluginConcentratorSupportLibraryEventHandler
  }
}

plugin(concentrator-support-stub-library) {
  name=Concentrator Support Stub Library
  description=This plugin provides stub implementations of NCP concentrator functionality.
  category=Utility
  quality=production
  root=$STACK/app/em260

  providedApis=concentrator-support
  
  # APP:EM260_CONCENTRATOR_STUB
  concentrator-stub.c

  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/em260-concentrator-stub-library-cortexm3-iar-$--architectureId;L--$-em3xx/em260-concentrator-stub-library.a
    concentrator-stub.c
  }
}

plugin(ncp-spi) {
  name=NCP - SPI
  description=This plugin provides the functionality for an NCP application to communicate with a host over SPI.
  category=Core
  quality=production
  root=$STACK/app/em260

  requiredApis=buffer,ext-device,ezsp-protocol,hal,serial,random,xncp
  api.ext-device.condition=!conf.architectureMatches("simulation")

  providedApis=counters,ezsp,ezsp-protocol,main,ncp,ncp-serial
  api.ezsp-protocol.header=$STACK/app/util/ezsp/ezsp-protocol.h
  api.ezsp.header=command-context.h

  implementedCallbacks=main,emberStackStatusHandler,emberCounterHandler,emberEnergyScanResultHandler

  # APP:EM260_COMMON
  em260-common.c
  # HAL:CONFIGURATION
  $HAL/ember-configuration.c
  
  # APP:EM260_SPI
  serial-interface-spi.c
  # APP:NCP_CORE
  main.c
  command-handlers.c
  timers.c
  memory-allocation.c
  stack-callbacks.c
  frame-utilities.c
    # APP_UTIL:EZSP_FRAME_UTILITIES
    ../util/ezsp/ezsp-frame-utilities.c
  # APP_UTIL:COUNTERS
  ../util/counters/counters.c
  # HAL_MICRO_PLAT:SPI_PROTOCOL
  $HAL/micro/cortexm3/spi-protocol.c                (em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597)
  $HAL/micro/unix/simulation/spi-protocol-ncp-sim.c (simulation)

  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/em260-spi-util-library-cortexm3-iar-$--architectureId;L--$-em3xx/em260-spi-util-library.a
    serial-interface-spi.c
    main.c
    command-handlers.c
    timers.c
    memory-allocation.c
    stack-callbacks.c
    frame-utilities.c
    ../util/ezsp/ezsp-frame-utilities.c
    ../util/counters/counters.c
    $HAL/micro/cortexm3/spi-protocol.c
  }

  precompiled(simulation) {
    file=$STACK/build/em260-spi-util-library-unix-gcc-simulation-simulation/em260-spi-util-library.a
    serial-interface-spi.c
    main.c
    command-handlers.c
    timers.c
    memory-allocation.c
    stack-callbacks.c
    frame-utilities.c
    ../util/ezsp/ezsp-frame-utilities.c
    ../util/counters/counters.c
    $HAL/micro/unix/simulation/spi-protocol-ncp-sim.c
  }
  
  setup(macros) {
    -DEZSP_SPI
    -DEMBER_SC2_MODE=EMBER_SPI_SLAVE

    EZSP_TOKEN_SIZE=8
    EZSP_TOKEN_ENTRIES=32
    
    SOURCE_ROUTE_TABLE_MEMORY=40
    BINDING_TABLE_MEMORY=60
    BROADCAST_TABLE_MEMORY=(EMBER_BROADCAST_TABLE_SIZE*5)
    RF4CE_PAIRING_TABLE_MEMORY=800
    EXTRA_MEMORY=(SOURCE_ROUTE_TABLE_MEMORY+BINDING_TABLE_MEMORY+BROADCAST_TABLE_MEMORY+RF4CE_PAIRING_TABLE_MEMORY)
    RESERVED_AVAILABLE_MEMORY=(EMBER_PACKET_BUFFER_COUNT+EXTRA_MEMORY)
  }

  setup(eventConfiguration) {
    emberAfPluginEzspHostTimer0EventControl, emberAfPluginEzspHostTimer0EventHandler
    emberAfPluginEzspHostTimer1EventControl, emberAfPluginEzspHostTimer1EventHandler
  }
  
  setup(bookkeeping) {
    provides = getValue, getExtendedValue, setValue, getPolicy, setPolicy, getConfigurationValue, setConfigurationValue, modifyMemoryAllocation, permitHostToNcpFrame, init, tick
    
    provides.getValue   = void emberAfEzspGetValueCommandCallback(EmberAfPluginEzspValueCommandContext* context)
    provides.getValue.0 = emberAfPluginEzspGetValueCommandCallback

    provides.getExtendedValue = void emberAfEzspGetExtendedValueCommandCallback(EmberAfPluginEzspValueCommandContext* context)

    provides.setValue   = void emberAfEzspSetValueCommandCallback(EmberAfPluginEzspValueCommandContext* context)
    provides.setValue.0 = emberAfPluginEzspSetValueCommandCallback

    provides.getPolicy   = void emberAfEzspGetPolicyCommandCallback(EmberAfPluginEzspPolicyCommandContext* context)
    provides.getPolicy.0 = emberAfPluginEzspPolicyCommandCallback

    provides.setPolicy   = void emberAfEzspSetPolicyCommandCallback(EmberAfPluginEzspPolicyCommandContext* context)
    provides.setPolicy.0 = emberAfPluginEzspPolicyCommandCallback
    
    provides.getConfigurationValue   = void emberAfEzspGetConfigurationValueCommandCallback(EmberAfPluginEzspConfigurationValueCommandContext* context)
    provides.getConfigurationValue.0 = emberAfPluginEzspGetConfigurationValueCommandCallback
    
    provides.setConfigurationValue   = void emberAfEzspSetConfigurationValueCommandCallback(EmberAfPluginEzspConfigurationValueCommandContext* context)
    provides.setConfigurationValue.0 = emberAfPluginEzspSetConfigurationValueCommandCallback

    provides.modifyMemoryAllocation = void emberAfPluginEzspModifyMemoryAllocationCallback(void)

    provides.permitHostToNcpFrame = void emberAfPluginEzspPermitHostToNcpFrameCallback(boolean* permit)
    
    provides.init   = void emberAfInit(void)
    provides.init.0 = emberAfMainInitCallback

    provides.tick   = void emberAfTick(void)
    provides.tick.0 = emberAfMainTickCallback
  }
}

plugin(ncp-uart) {
  name=NCP - UART
  description=This plugin provides the functionality for an NCP application to communicate with a host over a UART.
  category=Core
  quality=production
  root=$STACK/app/em260/

  requiredApis=buffer,ext-device,ezsp-protocol,hal,serial,random,xncp
  api.ext-device.condition=!conf.architectureMatches("simulation")

  providedApis=counters,ezsp,ezsp-protocol,main,ncp,ncp-serial
  api.ezsp-protocol.header=$STACK/app/util/ezsp/ezsp-protocol.h
  api.ezsp.header=command-context.h

  implementedCallbacks=main,emberStackStatusHandler,emberCounterHandler,emberEnergyScanResultHandler

  # APP:EM260_COMMON
  em260-common.c
  # HAL:CONFIGURATION
  $HAL/ember-configuration.c
  
  # APP:EM260_UART
  serial-interface-uart.c
  # APP:NCP_CORE
  main.c
  command-handlers.c
  timers.c
  memory-allocation.c
  stack-callbacks.c
  frame-utilities.c
    # APP_UTIL:EZSP_FRAME_UTILITIES
    ../util/ezsp/ezsp-frame-utilities.c
  # APP_UTIL:COUNTERS
  ../util/counters/counters.c

  # HAL_MICRO:ASH_COMMON
  $HAL/micro/generic/ash-common.c
  # HAL_MICRO:ASH_NCP
  $HAL/micro/generic/ash-ncp.c

  options=flowControl
  
  flowControl.name=Flow Control Type
  flowControl.description=Use this option to select the type of flow control to use for the application.
  flowControl.type=LIST:Hardware,Software
  flowControl.default=Software
  
  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/em260-uart-util-library-cortexm3-iar-$--architectureId;L--$-em3xx/em260-uart-util-library.a
    serial-interface-uart.c
    main.c
    command-handlers.c
    timers.c
    memory-allocation.c
    stack-callbacks.c
    frame-utilities.c
    ../util/ezsp/ezsp-frame-utilities.c
    ../util/counters/counters.c
  }

  precompiled(simulation) {
    file=$STACK/build/em260-uart-util-library-unix-gcc-simulation-simulation/em260-uart-util-library.a
    serial-interface-uart.c
    main.c
    command-handlers.c
    timers.c
    memory-allocation.c
    stack-callbacks.c
    frame-utilities.c
    ../util/ezsp/ezsp-frame-utilities.c
    ../util/counters/counters.c
  }

  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-ash-fifo-xon-xoff-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-ash-fifo-xon-xoff-library.a
    option.flowControl=Software
    $HAL/micro/generic/ash-common.c
    $HAL/micro/generic/ash-ncp.c
  }
  
  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-ash-buffers-rts-cts-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-ash-buffers-rts-cts-library.a
    option.flowControl=Hardware
    $HAL/micro/generic/ash-common.c
    $HAL/micro/generic/ash-ncp.c
  }
  
  setup(macros) {
    -DEZSP_UART
    -DNO_USB
    
    flowControl=Software : -DEMBER_SERIAL1_MODE=EMBER_SERIAL_FIFO
    flowControl=Software : -DEMBER_SERIAL1_TX_QUEUE_SIZE=32
    flowControl=Software : -DEMBER_SERIAL1_RX_QUEUE_SIZE=64
    flowControl=Software : -DEMBER_SERIAL1_XONXOFF
    
    flowControl=Hardware : -DEMBER_SERIAL1_MODE=EMBER_SERIAL_BUFFER
    flowControl=Hardware : -DEMBER_SERIAL1_TX_QUEUE_SIZE=2
    flowControl=Hardware : -DEMBER_SERIAL1_RX_QUEUE_SIZE=64
    flowControl=Hardware : -DEMBER_SERIAL1_RTSCTS
    flowControl=Hardware : -DEMBER_SERIAL0_MODE=EMBER_SERIAL_FIFO
    flowControl=Hardware : -DEMBER_SERIAL0_TX_QUEUE_SIZE=64
    flowControl=Hardware : -DEMBER_SERIAL0_RX_QUEUE_SIZE=64

    EZSP_TOKEN_SIZE=8
    EZSP_TOKEN_ENTRIES=32
    
    SOURCE_ROUTE_TABLE_MEMORY=40
    BINDING_TABLE_MEMORY=60
    BROADCAST_TABLE_MEMORY=(EMBER_BROADCAST_TABLE_SIZE*5)
    RF4CE_PAIRING_TABLE_MEMORY=800
    EXTRA_MEMORY=(SOURCE_ROUTE_TABLE_MEMORY+BINDING_TABLE_MEMORY+BROADCAST_TABLE_MEMORY+RF4CE_PAIRING_TABLE_MEMORY)
    RESERVED_AVAILABLE_MEMORY=(EMBER_PACKET_BUFFER_COUNT+EXTRA_MEMORY)
  }

  setup(eventConfiguration) {
    emberAfPluginEzspHostTimer0EventControl, emberAfPluginEzspHostTimer0EventHandler
    emberAfPluginEzspHostTimer1EventControl, emberAfPluginEzspHostTimer1EventHandler
  }
  
  setup(bookkeeping) {
    provides = getValue, getExtendedValue, setValue, getPolicy, setPolicy, getConfigurationValue, setConfigurationValue, modifyMemoryAllocation, permitHostToNcpFrame, init, tick
    
    provides.getValue   = void emberAfEzspGetValueCommandCallback(EmberAfPluginEzspValueCommandContext* context)
    provides.getValue.0 = emberAfPluginEzspGetValueCommandCallback

    provides.getExtendedValue = void emberAfEzspGetExtendedValueCommandCallback(EmberAfPluginEzspValueCommandContext* context)

    provides.setValue   = void emberAfEzspSetValueCommandCallback(EmberAfPluginEzspValueCommandContext* context)
    provides.setValue.0 = emberAfPluginEzspSetValueCommandCallback

    provides.getPolicy   = void emberAfEzspGetPolicyCommandCallback(EmberAfPluginEzspPolicyCommandContext* context)
    provides.getPolicy.0 = emberAfPluginEzspPolicyCommandCallback

    provides.setPolicy   = void emberAfEzspSetPolicyCommandCallback(EmberAfPluginEzspPolicyCommandContext* context)
    provides.setPolicy.0 = emberAfPluginEzspPolicyCommandCallback
    
    provides.getConfigurationValue   = void emberAfEzspGetConfigurationValueCommandCallback(EmberAfPluginEzspConfigurationValueCommandContext* context)
    provides.getConfigurationValue.0 = emberAfPluginEzspGetConfigurationValueCommandCallback
    
    provides.setConfigurationValue   = void emberAfEzspSetConfigurationValueCommandCallback(EmberAfPluginEzspConfigurationValueCommandContext* context)
    provides.setConfigurationValue.0 = emberAfPluginEzspSetConfigurationValueCommandCallback

    provides.modifyMemoryAllocation = void emberAfPluginEzspModifyMemoryAllocationCallback(void)

    provides.permitHostToNcpFrame = void emberAfPluginEzspPermitHostToNcpFrameCallback(boolean* permit)
    
    provides.init   = void emberAfInit(void)
    provides.init.0 = emberAfMainInitCallback

    provides.tick   = void emberAfTick(void)
    provides.tick.0 = emberAfMainTickCallback
  }
}

plugin(ncp-usb) {
  name=NCP - USB
  description=This plugin provides the functionality for an NCP application to communicate with a host over USB.
  category=Core
  quality=production
  root=$STACK/app/em260
  
  architecture=em3582,em3586,em3588,em3592,em3596,em3598
  
  requiredApis=buffer,ext-device,ezsp-protocol,hal,serial,random,xncp

  providedApis=counters,ezsp,ezsp-protocol,main,ncp,ncp-serial
  api.ezsp-protocol.header=$STACK/app/util/ezsp/ezsp-protocol.h
  api.ezsp.header=command-context.h

  implementedCallbacks=main,emberStackStatusHandler,emberCounterHandler,emberEnergyScanResultHandler

  # APP:EM260_COMMON
  em260-common.c
  # HAL:CONFIGURATION
  $HAL/ember-configuration.c
  
  # APP:EM260_USB
  serial-interface-usb.c
  # APP:NCP_CORE
  main.c
  command-handlers.c
  timers.c
  memory-allocation.c
  stack-callbacks.c
  frame-utilities.c
    # APP_UTIL:EZSP_FRAME_UTILITIES
    ../util/ezsp/ezsp-frame-utilities.c
  # APP_UTIL:COUNTERS
  ../util/counters/counters.c

  # HAL_MICRO:ASH_COMMON
  $HAL/micro/generic/ash-common.c
  # HAL_MICRO:ASH_NCP
  $HAL/micro/generic/ash-ncp.c

  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/em260-usb-util-library-cortexm3-iar-$--architectureId;L--$-em3xx/em260-usb-util-library.a
    serial-interface-usb.c
    main.c
    command-handlers.c
    timers.c
    memory-allocation.c
    stack-callbacks.c
    frame-utilities.c
    ../util/ezsp/ezsp-frame-utilities.c
    ../util/counters/counters.c
  }

  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=$STACK/build/ncp-ash-buffers-usb-library-cortexm3-iar-$--architectureId;L--$-em3xx/ncp-ash-buffers-usb-library.a
    $HAL/micro/generic/ash-common.c
    $HAL/micro/generic/ash-ncp.c
  }

  setup(macros) {
    -DEZSP_UART
    -DEZSP_USB
    
    -DEMBER_SERIAL0_MODE=EMBER_SERIAL_FIFO
    -DEMBER_SERIAL0_TX_QUEUE_SIZE=64
    -DEMBER_SERIAL0_RX_QUEUE_SIZE=32
    
    -DEMBER_SERIAL3_MODE=EMBER_SERIAL_BUFFER
    -DEMBER_SERIAL3_TX_QUEUE_SIZE=64
    -DEMBER_SERIAL3_RX_QUEUE_SIZE=64

    EZSP_TOKEN_SIZE=8
    EZSP_TOKEN_ENTRIES=32
    
    SOURCE_ROUTE_TABLE_MEMORY=40
    BINDING_TABLE_MEMORY=60
    BROADCAST_TABLE_MEMORY=(EMBER_BROADCAST_TABLE_SIZE*5)
    RF4CE_PAIRING_TABLE_MEMORY=800
    EXTRA_MEMORY=(SOURCE_ROUTE_TABLE_MEMORY+BINDING_TABLE_MEMORY+BROADCAST_TABLE_MEMORY+RF4CE_PAIRING_TABLE_MEMORY)
    RESERVED_AVAILABLE_MEMORY=(EMBER_PACKET_BUFFER_COUNT+EXTRA_MEMORY)
  }    

  setup(eventConfiguration) {
    emberAfPluginEzspHostTimer0EventControl, emberAfPluginEzspHostTimer0EventHandler
    emberAfPluginEzspHostTimer1EventControl, emberAfPluginEzspHostTimer1EventHandler
  }
  
  setup(bookkeeping) {
    provides = getValue, getExtendedValue, setValue, getPolicy, setPolicy, getConfigurationValue, setConfigurationValue, modifyMemoryAllocation, permitHostToNcpFrame, init, tick
    
    provides.getValue   = void emberAfEzspGetValueCommandCallback(EmberAfPluginEzspValueCommandContext* context)
    provides.getValue.0 = emberAfPluginEzspGetValueCommandCallback

    provides.getExtendedValue = void emberAfEzspGetExtendedValueCommandCallback(EmberAfPluginEzspValueCommandContext* context)

    provides.setValue   = void emberAfEzspSetValueCommandCallback(EmberAfPluginEzspValueCommandContext* context)
    provides.setValue.0 = emberAfPluginEzspSetValueCommandCallback

    provides.getPolicy   = void emberAfEzspGetPolicyCommandCallback(EmberAfPluginEzspPolicyCommandContext* context)
    provides.getPolicy.0 = emberAfPluginEzspPolicyCommandCallback

    provides.setPolicy   = void emberAfEzspSetPolicyCommandCallback(EmberAfPluginEzspPolicyCommandContext* context)
    provides.setPolicy.0 = emberAfPluginEzspPolicyCommandCallback
    
    provides.getConfigurationValue   = void emberAfEzspGetConfigurationValueCommandCallback(EmberAfPluginEzspConfigurationValueCommandContext* context)
    provides.getConfigurationValue.0 = emberAfPluginEzspGetConfigurationValueCommandCallback
    
    provides.setConfigurationValue   = void emberAfEzspSetConfigurationValueCommandCallback(EmberAfPluginEzspConfigurationValueCommandContext* context)
    provides.setConfigurationValue.0 = emberAfPluginEzspSetConfigurationValueCommandCallback

    provides.modifyMemoryAllocation = void emberAfPluginEzspModifyMemoryAllocationCallback(void)

    provides.permitHostToNcpFrame = void emberAfPluginEzspPermitHostToNcpFrameCallback(boolean* permit)
    
    provides.init   = void emberAfInit(void)
    provides.init.0 = emberAfMainInitCallback

    provides.tick   = void emberAfTick(void)
    provides.tick.0 = emberAfMainTickCallback
  }
}

plugin(xncp-stub) {
  name=XNCP Stub Library
  description=This library contains stub implementations of XNCP functionality on an NCP.
  category=Core
  quality=production
  root=$STACK
  
  providedApis=xncp
  
  app/xncp/xncp-stubs.c
  
  precompiled(em342,em346,em355,em3555,em357,em3581,em3582,em3585,em3586,em3587,em3588,em3591,em3592,em3595,em3596,em3597,em3598) {
    file=build/em260-xncp-stub-library-cortexm3-iar-$--architectureId;L--$-em3xx/em260-xncp-stub-library.a
    app/xncp/xncp-stubs.c
  }
}

plugin(ember-minimal-printf) {
  name=Ember Minimal Printf
  description=This plugin provides a simplified version of printf() via the emberSerialPrintf() primitive.  The supported printf format specifiers are non-standard but require a smaller flash foot-print than standard printf.
  category=I/O
  quality=production
  root=$STACK/app/util/serial

  providedApis=printf
  requiredApis=serial

  # APP_UTIL:SERIAL
  ember-printf.c
}

plugin(serial) {
  name=Serial
  description=High-level serial communication functions.
  category=I/O
  quality=production
  root=$STACK/app/util/serial

  providedApis=serial
  providedApis.serial.header=serial.h
  
  requiredApis=hal,printf,system-timer

  # APP_UTIL:SERIAL
  serial.c
}

